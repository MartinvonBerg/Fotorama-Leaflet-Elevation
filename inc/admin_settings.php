<?php

/**
 * Generated by the WordPress Option Page generator and highly adopted by Martin von Berg
 * at http://jeremyhixon.com/wp-tools/option-page/
 */

// use this code for translation: __('string-to-translate', 'fotoramamulti'). Translate the 'string-to-translate' in your po-file

namespace mvbplugins\fotoramamulti;

$path = plugin_dir_path(__FILE__);
require_once $path . 'custom_mime_types.php'; 
require_once $path . 'parseGPX.php'; 

class FotoramaElevation {
	private $fotorama_elevation_options; // TODO: missing typehints for PHP 7.4+
	private $fotorama_option2;
	private $up_dir = '';    
	private $min_height_map = 100;
	private $max_height_map = 1000;
	private $min_height_chart = 100;
	private $max_height_chart = 800;
	private $min_width = 100;
	private $max_width = 1500;

	public function __construct() {
		add_action( 'admin_init', array( $this, 'fotorama_elevation_page_init' ) );
		add_action( 'admin_menu', array( $this, 'fotorama_elevation_add_plugin_page' ) );
	}

	public function fotorama_elevation_add_plugin_page() {
		add_options_page(
			'Fotorama-Elevation', // page_title
			'Fotorama-Elevation', // menu_title
			'manage_options', // capability
			'fotorama-elevation', // menu_slug
			array( $this, 'fotorama_elevation_create_admin_page' ) // function
		);
	}

	public function fotorama_elevation_create_admin_page() {
		$this->fotorama_elevation_options = get_option( 'fotorama_elevation_option_name' );
		$this->up_dir = wp_get_upload_dir()['basedir'];     // upload_dir

		?>
		<div class="wrap">
			<h2><?php esc_html_e('Settings for Fotorama-Elevation Plugin','fotoramamulti') ?></h2>
			<h4><?php esc_html_e('General Settings for the Fotorama Elevation Plugin that are used for every page or post where the Plugin is used. All settings can be overwritten by parameters of the shortcode.','fotoramamulti') ?></h4>
			<hr>

			<form method="post" action="options.php" enctype="multipart/form-data">
            <?php
			   settings_fields("gpx_section");
			   do_settings_sections("gpx_file");
			   ?>
			   <p><b><?php esc_html_e('Hint: GPX-routes without elevation data should be converted to tracks with','fotoramamulti') ?> <a href="https://www.gpsvisualizer.com/elevation" target="_blank">www.gpsvisualizer.com.</a></br> 
			   <?php esc_html_e('Trackdata without elevation will be skipped. Tracksegments will be combined. Routes and waypoints will be ignored. Trackname will be set to filename.','fotoramamulti') ?></b></br>
			   <?php esc_html_e('Button Save GPX-File underneath will save settings and / or GPX-File.','fotoramamulti') ?></p> 
			   <?php
			   $strg = __('Save GPX-File', 'fotoramamulti');
			   submit_button( $strg );            
            ?>

         	</form>
			<hr>
			<form method="post" action="options.php">
				<?php
					settings_fields( 'fotorama_elevation_option_group' );
					do_settings_sections( 'fotorama-elevation-admin' );
					submit_button();
				?>
			</form>
			
			<hr>
            <h3>List of shortcode Parameters:</h3>
			<p><b>(Almost) Complete EXAMPLE shortcode with the above settings (No need to use it in Post!): </br></b> <?php
				$example = '[gpxview imgpath="' . 	$this->fotorama_elevation_options['path_to_images_for_fotorama_0'] . '" ';
				$example.= 'gpxpath="' .            $this->fotorama_elevation_options['path_to_gpx_files_2'] . '" ';
				$example.= 'gpxfile="test.gpx" ';
				//$example.= 'showalltracks="' . 		$this->fotorama_elevation_options['showalltracks'] . '" ';
				$example.= 'showalltracks="boolean" ';
				$example.= 'mapheight="' .          $this->fotorama_elevation_options['height_of_map_10'] . '" ';
				$example.= 'chartheight="' .        $this->fotorama_elevation_options['height_of_chart_11'] . '" ';
				$example.= 'dload="' .              $this->fotorama_elevation_options['download_gpx_files_3'] . '" ';
				$example.= 'alttext="' .            $this->fotorama_elevation_options['general_text_for_the_fotorama_alt_9'] . '" ';
				$example.= 'ignoresort="' .         $this->fotorama_elevation_options['ignore_custom_sort_6'] . '" ';
				$example.= 'useCDN="' .             $this->fotorama_elevation_options['useCDN_13'] . '" ';
				$example.= 'showadress="' .         $this->fotorama_elevation_options['show_address_of_start_7'] . '" ';
				$example.= 'showmap="true" ';
				$example.= 'adresstext="' .         $this->fotorama_elevation_options['text_for_start_address_8'] . '" ';
				$example.= 'requiregps="' .         $this->fotorama_elevation_options['images_with_gps_required_5'] . '" ';
				$example.= 'maxwidth="' .           $this->fotorama_elevation_options['max_width_of_container_12'] . '" ';
				$example.= 'minrowwidth="' .        $this->fotorama_elevation_options['min_width_css_grid_row_14'] . '" ';
				$example.= 'showcaption="' .        $this->fotorama_elevation_options['show_caption_4'] . '" ';
				$example.= 'eletheme="' .           $this->fotorama_elevation_options['colour_theme_for_leaflet_elevation_1'] . '" ';
				$example.= 'mapcenter="' . 			($this->fotorama_elevation_options['mapcenter'] ?? '48.12,12.35') . '" ';
				$example.= 'zoom="' . 				($this->fotorama_elevation_options['zoom'] ?? '8') . '" ';
				$example.= 'markertext="' . 		($this->fotorama_elevation_options['markertext'] ?? 'My Address') . '" ';
				$example.= 'fit="' .				($this->fotorama_elevation_options['fit'] ?? 'cover') . '" '; // 'contain' Default, 'cover', 'scaledown', 'none'
				$example.= 'ratio="' .				($this->fotorama_elevation_options['ratio'] ?? '1.5') . '" ';
				$example.= 'background="' .			($this->fotorama_elevation_options['background'] ?? 'darkgrey') . '" '; // background color in CSS name
				$example.= 'nav="' .				($this->fotorama_elevation_options['nav'] ?? 'thumbs') . '" '; // Default: 'dots', 'thumbs') . '" '; false, // funktioniert nicht
				$example.= 'navposition="' .		($this->fotorama_elevation_options['navposition'] ?? 'bottom') . '" '; // 'top'
				$example.= 'navwidth="' .			($this->fotorama_elevation_options['navwidth'] ?? '100') . '" '; // in percent
				$example.= 'f_thumbwidth="' .		($this->fotorama_elevation_options['f_thumbwidth'] ?? '100') . '" '; // in pixels
				$example.= 'f_thumbheight="' .		($this->fotorama_elevation_options['f_thumbheight'] ?? '75') . '" '; // in pixels
				$example.= 'thumbmargin="' .		($this->fotorama_elevation_options['thumbmargin'] ?? '2') . '" '; // in pixels
				$example.= 'thumbborderwidth="' .	($this->fotorama_elevation_options['thumbborderwidth'] ?? '2') . '" '; // in pixels
				$example.= 'thumbbordercolor="' .	($this->fotorama_elevation_options['thumbbordercolor'] ?? '#ea0000') . '" '; // background color in CSS name or HEX-value. The color of the last shortcode on the page will be taken.
				$example.= 'transition="' .			($this->fotorama_elevation_options['transition'] ?? 'crossfade') . '" '; // 'slide' Default 'crossfade' 'dissolve'
				$example.= 'transitionduration="' .	($this->fotorama_elevation_options['transitionduration'] ?? '400') . '" '; // in ms
				$example.= 'loop="' .				($this->fotorama_elevation_options['loop'] ?? 'true') . '" '; // true or false
				$example.= 'autoplay="' .			($this->fotorama_elevation_options['autoplay'] ?? '3000') . '" '; // on with 'true' or any interval in milliseconds.
				$example.= 'arrows="' .				($this->fotorama_elevation_options['arrows'] ?? 'true') . '" ';  // true : Default, false, 'always' : Do not hide controls on hover or tap
				$example.= 'shadows="' .			($this->fotorama_elevation_options['shadows'] ?? 'true') . '"]'; // true or false
			 	echo $example;
			?></p>

			<style type="text/css">
				.tg  {border-collapse:collapse;border-spacing:2;background-color: white;}
				.tg td{border-color:black;border-style:solid;border-width:1px;font-family:Arial, sans-serif;font-size:14px;
				overflow:hidden;padding:10px 5px;word-break:normal;}
				.tg th{border-color:black;border-style:solid;border-width:1px;font-family:Arial, sans-serif;font-size:14px;
				font-weight:normal;overflow:hidden;padding:10px 5px;word-break:normal;}
				.tg .tg-dncm{border-color:inherit;font-weight:bold;position:-webkit-sticky;position:sticky;text-align:left;top:-1px;
				vertical-align:top;will-change:transform;background-color: goldenrod;}
				.tg .tg-0pky{border-color:inherit;text-align:left;vertical-align:top}
				.tg tr:nth-child(even) {background-color:lightgray;}
			</style>

			<table class="tg">
				<thead>
				<tr>
					<th class="tg-dncm">Shortcode</th>
					<th class="tg-dncm">Value (Default first)</th>
					<th class="tg-dncm">Example</th>
					<th class="tg-dncm">Description</th>
				</tr>
				</thead>
				<tbody>
				<tr>
					<td class="tg-0pky">gpxpath</td>
					<td class="tg-0pky">gpx</td>
					<td class="tg-0pky">gpxpath="gpx"</td>
					<td class="tg-0pky">Path to file(s) with GPX-Track(s) relative to the Wordpress uploads folder, e.g: ../wordpress/wp-content/uploads/gpx</td>
				</tr>
				<tr>
					<td class="tg-0pky">gpxfile</td>
					<td class="tg-0pky">'' / test.gpx</td>
					<td class="tg-0pky">gpxfile="test.gpx"</td>
					<td class="tg-0pky">File with gpx-track, e.g: ../wordpress/wp-content/uploads/gpx/test.gpx. Use comma seperated list for multiple file: "f1.gpx, f2.gpx, f3.gpx"</td>
				</tr>
				<tr>
					<td class="tg-0pky">dload</td>
					<td class="tg-0pky">yes / no</td>
					<td class="tg-0pky">dload="yes"</td>
					<td class="tg-0pky">Provide download link for the GPX-Tracks, if "yes".</td>
				</tr>
				<tr>
					<td class="tg-0pky">showalltracks</td>
					<td class="tg-0pky">false / true </td>
					<td class="tg-0pky">showalltracks="true"</td>
					<td class="tg-0pky">Show all given tracks together in one Map. Works only with one map!. Will be ignored for multiple maps or if only one track is provided. There is no admin-setting for this option.</td>
				</tr>
				<tr>
					<td class="tg-0pky">showadress</td>
					<td class="tg-0pky">true / false</td>
					<td class="tg-0pky">showadress="true"</td>
					<td class="tg-0pky">Show start adress of the tour. GPX-coords are taken from the first point in the GPX-track or from the first image.</td>
				</tr>
				<tr>
					<td class="tg-0pky">adresstext</td>
					<td class="tg-0pky">Startadresse</td>
					<td class="tg-0pky">adresstext="Startadresse"</td>
					<td class="tg-0pky">Text for header above start address</td>
				</tr>
				<tr>
					<td class="tg-0pky">showmap</td>
					<td class="tg-0pky">true / false</td>
					<td class="tg-0pky">showmap="true"</td>
					<td class="tg-0pky">Show the map, independent of other settinges. Currently no Admin setting for that.</td>
				</tr>
				<tr>
					<td class="tg-0pky">mapselector</td>
					<td class="tg-0pky">OpenTopoMap</td>
					<td class="tg-0pky">mapselector="OpenStreetMap"</td>
					<td class="tg-0pky">Choose which map should be shown first. Possible values for Maps: OpenStreetMap, OpenTopoMap, CycleOSM, Satellit</td>
				</tr>
				<tr>
					<td class="tg-0pky">mapheight</td>
					<td class="tg-0pky">450</td>
					<td class="tg-0pky">mapheight="450"</td>
					<td class="tg-0pky">Height of the leaflet map in pixels (px)</td>
				</tr>
				<tr>
					<td class="tg-0pky">chartheight</td>
					<td class="tg-0pky">200</td>
					<td class="tg-0pky">chartheight="200"</td>
					<td class="tg-0pky">Height of the leaflet elevation chart in pixels (px)</td>
				</tr>
				<tr>
					<td class="tg-0pky">eletheme</td>
					<td class="tg-0pky">lime-theme</td>
					<td class="tg-0pky">eletheme="lime-theme"</td>
					<td class="tg-0pky">Theme for leaflet elevation. Other themes are: steelblue-theme, purple-theme, yellow-theme, red-theme, magenta-theme, lightblue-theme and martin-theme. Martin-theme is my special theme.</td>
				</tr>
				<tr>
					<td class="tg-0pky">mapcenter</td>
					<td class="tg-0pky">0.0,0.0</td>
					<td class="tg-0pky">mapcenter="48.12,12.35"</td>
					<td class="tg-0pky">Center of the map if NO tracks are defined. Usa comma "," for separation and dot "." for decimals. There is no admin-setting for this option.</td>
				</tr>
				<tr>
					<td class="tg-0pky">zoom</td>
					<td class="tg-0pky">8</td>
					<td class="tg-0pky">zoom="8"</td>
					<td class="tg-0pky">Zoom level for the map if NO tracks are defined. There is no admin-setting for this option.</td>
				</tr>
				<tr>
					<td class="tg-0pky">markertext</td>
					<td class="tg-0pky">Home Address</td>
					<td class="tg-0pky">markertext="My Address"</td>
					<td class="tg-0pky">Tooltip text for the marker that is shown at mouse over. There is no admin-setting for this option.</td>
				</tr>
				<tr>
				<td class="tg-0pky"><strong>Fotorama Settings</strong></td><td></td><td></td><td></td>
				</tr>
				<tr>
					<td class="tg-0pky">imgpath</td>
					<td class="tg-0pky">Bilder</td>
					<td class="tg-0pky">imgpath="Bilder"</td>
					<td class="tg-0pky">Path the images relative to the Wordpress uploads folder, e.g: ../wordpress/wp-content/uploads/galleries/holiday2020</td>
				</tr>
				<tr>
					<td class="tg-0pky">alttext</td>
					<td class="tg-0pky">''</td>
					<td class="tg-0pky">alttext="Image Slider with map from holiday"</td>
					<td class="tg-0pky">Alltext for the fotorama slider for SEO</td>
				</tr>
				<tr>
					<td class="tg-0pky">ignoresort</td>
					<td class="tg-0pky">false / true</td>
					<td class="tg-0pky">ignoresort="false"</td>
					<td class="tg-0pky">Ignore custom sort even if provided by Wordpress. If checked sort by date ascending</td>
				</tr>
			
				<tr>
					<td class="tg-0pky">requiregps</td>
					<td class="tg-0pky">true / false</td>
					<td class="tg-0pky">requiregps="true"</td>
					<td class="tg-0pky">Require images to have GPS-data in EXIF. Show image only if it provides GPS-Data in its EXIF.</td>
				</tr>
				<tr>
					<td class="tg-0pky">maxwidth</td>
					<td class="tg-0pky">600</td>
					<td class="tg-0pky">maxwidth="600"</td>
					<td class="tg-0pky">Maximum width of the whole container with slider and map</td>
				</tr>
				<tr>
					<td class="tg-0pky">minrowwidth</td>
					<td class="tg-0pky">480</td>
					<td class="tg-0pky">minrowwidth="480"</td>
					<td class="tg-0pky">Minimum width of one row of the CSS-Grid. If greater than maxwidth/2 Fotorama and the map are never shown in one row. 
										Mind that the max. width of the outer div may be inherited from other elements or set by the theme.</td>
				</tr>
				<tr>
					<td class="tg-0pky">showcaption</td>
					<td class="tg-0pky">true / false</td>
					<td class="tg-0pky">showcaption="true"</td>
					<td class="tg-0pky">Show the caption in the fotorama slider</td>
				</tr>

				<tr>
					<td class="tg-0pky">shortcaption</td>
					<td class="tg-0pky">false / true</td>
					<td class="tg-0pky">shortcaption="true"</td>
					<td class="tg-0pky">Show short caption only. (No image metadata)</td>
				</tr>
			
				<tr><td class="tg-0pky">fit</td><td class="tg-0pky">contain , cover, scaledown, none</td><td class="tg-0pky">fit="contain"</td><td class="tg-0pky">Define the scaling of Fotos for the Fotorama Slider</td></tr>
				<tr><td class="tg-0pky">ratio</td><td class="tg-0pky">1.5</td><td class="tg-0pky">ratio="1.0"</td><td class="tg-0pky">Define the width / height ratio of the Fotorama slider. Smaller ratio means greater height of the Slider. No checking of values up to now</td></tr>
				<tr><td class="tg-0pky">background</td><td class="tg-0pky">darkgrey</td><td class="tg-0pky">background="red"</td><td class="tg-0pky">Background color of the slider defined by a valid CSS name</td></tr>
				<tr><td class="tg-0pky">navposition</td><td class="tg-0pky">bottom , top</td><td class="tg-0pky">navposition="top"</td><td class="tg-0pky">Position of the navigation bar</td></tr>
				<tr><td class="tg-0pky">navwidth</td><td class="tg-0pky">100</td><td class="tg-0pky">navwidth="80"</td><td class="tg-0pky">Width of the navigation bar in percent.</td></tr>
				<tr><td class="tg-0pky">f_thumbwidth</td><td class="tg-0pky">100</td><td class="tg-0pky">f_thumbwidth="80"</td><td class="tg-0pky">Width of the single thumbnail in the navigation bar in pixels</td></tr>
				<tr><td class="tg-0pky">f_thumbheight</td><td class="tg-0pky">75</td><td class="tg-0pky">f_thumbheight="80"</td><td class="tg-0pky">Height of the single thumbnail in the navigation bar in pixels</td></tr>
				<tr><td class="tg-0pky">thumbmargin</td><td class="tg-0pky">2</td><td class="tg-0pky">thumbmargin="3"</td><td class="tg-0pky">Margin between thumbnails in pixels</td></tr>
				<tr><td class="tg-0pky">thumbborderwidth</td><td class="tg-0pky">2</td><td class="tg-0pky">thumbborderwidth="3"</td><td class="tg-0pky">Width of the coloured thumbnail border in pixels</td></tr>
				<tr><td class="tg-0pky">thumbbordercolor</td><td class="tg-0pky">#ea0000</td><td class="tg-0pky">thumbbordercolor="blue"</td><td class="tg-0pky">Color of thumbnail border in CSS name or HEX-value with #!. Attention: If there are multiple shortcodes on the page, the color of the LAST shortcode on the page will be taken.</td></tr>
				<tr><td class="tg-0pky">transition</td><td class="tg-0pky">crossfade , slide , dissolve</td><td class="tg-0pky">transition="slide"</td><td class="tg-0pky">Type of transition between images</td></tr>
				<tr><td class="tg-0pky">transitionduration</td><td class="tg-0pky">400</td><td class="tg-0pky">transitionduration="200"</td><td class="tg-0pky">Duration of transition in ms</td></tr>
				<tr><td class="tg-0pky">loop</td><td class="tg-0pky">true , false</td><td class="tg-0pky">loop="false"</td><td class="tg-0pky">Loop through images (proceed with first once the reached the las) true or false</td></tr>
				<tr><td class="tg-0pky">autoplay</td><td class="tg-0pky">3000</td><td class="tg-0pky">autoplay="false"</td><td class="tg-0pky">Autoplay or loop the slider. On with "true" or any numeric interval in milliseconds. Of with "false"</td></tr>
				<tr><td class="tg-0pky">arrows</td><td class="tg-0pky">true , false , always</td><td class="tg-0pky">arrows="false"</td><td class="tg-0pky">Show arrows for the slider control. 'always' : Do not hide controls on hover or tap</td></tr>
				<tr><td class="tg-0pky">shadows</td><td class="tg-0pky">true , false</td><td class="tg-0pky">shadows="false"</td><td class="tg-0pky">Show shadows. Does not work as expected.</td></tr>
				
				</tbody>
			</table>

		</div>
		<?php 
	}

	public function fotorama_elevation_page_init() { 
		register_setting(
			'fotorama_elevation_option_group', // option_group
			'fotorama_elevation_option_name', // option_name
			array( $this, 'fotorama_elevation_sanitize' ) // sanitize_callback
		);

		// ---------- Leaflet Elevation Settings Section
        add_settings_section(
			'leaflet_elevation_setting_section', // id
			__( 'Leaflet Elevation Settings', 'fotoramamulti' ), // title
			array( $this, 'leaflet_elevation_section_info' ), // callback
			'fotorama-elevation-admin' // page
		);

		add_settings_field(
			'path_to_gpx_files_2', // id
			__( 'Path to GPX-Files', 'fotoramamulti' ), // title
			array( $this, 'path_to_gpx_files_2_callback' ), // callback
			'fotorama-elevation-admin', // page
			'leaflet_elevation_setting_section' // section
		);

		add_settings_field(
			'download_gpx_files_3', // id
			__( 'Download GPX-Files', 'fotoramamulti' ), // title
			array( $this, 'download_gpx_files_3_callback' ), // callback
			'fotorama-elevation-admin', // page
			'leaflet_elevation_setting_section' // section
		);

		add_settings_field (
			'show_address_of_start_7', // id
			__( 'Show Address', 'fotoramamulti' ), // title
			array( $this, 'show_address_of_start_7_callback' ), // callback
			'fotorama-elevation-admin', // page
			'leaflet_elevation_setting_section' // section
		);

		add_settings_field(
			'text_for_start_address_8', // id
			__( 'Text for Start address', 'fotoramamulti' ), // title
			array( $this, 'text_for_start_address_8_callback' ), // callback
			'fotorama-elevation-admin', // page
			'leaflet_elevation_setting_section' // section
		);

		add_settings_field(
			'mapselector', // id
			__( 'Select the Map', 'fotoramamulti' ), // title
			array( $this, 'mapselector_callback' ), // callback
			'fotorama-elevation-admin', // page
			'leaflet_elevation_setting_section' // section
		);

		// --------- TileServer added 2022-08-24 ----------------
		add_settings_field(
			'use_tile_server', // id : boolean
			__( 'Use local Tileserver', 'fotoramamulti' ), // title
			array( $this, 'usetileserver_callback' ), // callback
			'fotorama-elevation-admin', // page
			'leaflet_elevation_setting_section' // section
		);

		add_settings_field(
			'convert_tiles_to_webp', // id : boolean
			__( 'Convert and serve local Tiles as webp', 'fotoramamulti' ), // title
			array( $this, 'tiles_as_webp_callback' ), // callback
			'fotorama-elevation-admin', // page
			'leaflet_elevation_setting_section' // section
		);
		// --------- TileServer ---------------------------------

		add_settings_field(
			'height_of_map_10', // id
			__( 'Height of Map in px', 'fotoramamulti' ), // title
			array( $this, 'height_of_map_10_callback' ), // callback
			'fotorama-elevation-admin', // page
			'leaflet_elevation_setting_section' // section
		);

		add_settings_field(
			'height_of_chart_11', // id
			__( 'Height of Chart in px', 'fotoramamulti' ), // title
			array( $this, 'height_of_chart_11_callback' ), // callback
			'fotorama-elevation-admin', // page
			'leaflet_elevation_setting_section' // section
		);

		add_settings_field(
			'max_width_of_container_12', // id
			__( 'Max Width of Container in px', 'fotoramamulti' ), // title
			array( $this, 'max_width_of_container_12_callback' ), // callback
			'fotorama-elevation-admin', // page
			'leaflet_elevation_setting_section' // section
		);

		add_settings_field(
			'min_width_css_grid_row_14', // id
			__( 'Min Width of one CSS-grid Row in px', 'fotoramamulti' ), // title
			array( $this, 'min_width_css_grid_row_14_callback' ), // callback
			'fotorama-elevation-admin', // page
			'leaflet_elevation_setting_section' // section
		);

		add_settings_field(
			'colour_theme_for_leaflet_elevation_1', // id
			__( 'Colour Theme for Leaflet Elevation', 'fotoramamulti' ), // title
			array( $this, 'colour_theme_for_leaflet_elevation_1_callback' ), // callback
			'fotorama-elevation-admin', // page
			'leaflet_elevation_setting_section' // section
		);

		// ------------ Fotorama Section
		add_settings_section(
			'fotorama_elevation_setting_section', // id
			__( 'Fotorama Settings', 'fotoramamulti' ), // title
			array( $this, 'fotorama_elevation_section_info' ), // callback
			'fotorama-elevation-admin' // page
		);

		add_settings_field(
			'path_to_images_for_fotorama_0', // id
			__( 'Path to Images for Fotorama', 'fotoramamulti' ), // title
			array( $this, 'path_to_images_for_fotorama_0_callback' ), // callback
			'fotorama-elevation-admin', // page
			'fotorama_elevation_setting_section' // section
        );
        
        add_settings_field(
			'show_caption_4', // id
			__( 'Show Caption', 'fotoramamulti' ), // title
			array( $this, 'show_caption_4_callback' ), // callback
			'fotorama-elevation-admin', // page
			'fotorama_elevation_setting_section' // section
        );
        
        add_settings_field(
			'images_with_gps_required_5', // id
			__( 'Images with GPS required', 'fotoramamulti' ), // title
			array( $this, 'images_with_gps_required_5_callback' ), // callback
			'fotorama-elevation-admin', // page
			'fotorama_elevation_setting_section' // section
		);

		add_settings_field(
			'ignore_custom_sort_6', // id
			__( 'Ignore custom sort', 'fotoramamulti' ), // title
			array( $this, 'ignore_custom_sort_6_callback' ), // callback
			'fotorama-elevation-admin', // page
			'fotorama_elevation_setting_section' // section
        );

        add_settings_field(
			'general_text_for_the_fotorama_alt_9', // id
			__( 'General text for the Fotorama alt', 'fotoramamulti' ), // title
			array( $this, 'general_text_for_the_fotorama_alt_9_callback' ), // callback
			'fotorama-elevation-admin', // page
			'fotorama_elevation_setting_section' // section
		);

		// Addition to Fotorama: 2021-05-27 --------------------
		add_settings_field(
			'fit', // id
			__( 'How to fit the images in Fotorama', 'fotoramamulti' ), // title
			array( $this, 'fit_callback' ), // xy_callback erstellen und fotorama_elevation_sanitize function anpassen
			'fotorama-elevation-admin', // page
			'fotorama_elevation_setting_section' // section
		);

		add_settings_field (
			'ratio', // id
			__( 'Width / Height Ratio', 'fotoramamulti' ), // title
			array( $this, 'ratio_callback' ), // callback
			'fotorama-elevation-admin', // page
			'fotorama_elevation_setting_section' // section
		);

        add_settings_field (
			'background', // id
			__( 'Background Colour', 'fotoramamulti' ), // title
			array( $this, 'background_callback' ), // callback
			'fotorama-elevation-admin', // page
			'fotorama_elevation_setting_section' // section
		);

        add_settings_field (
			'navposition', // id
			__( 'Navigation Position', 'fotoramamulti' ), // title
			array( $this, 'navposition_callback' ), // callback
			'fotorama-elevation-admin', // page
			'fotorama_elevation_setting_section' // section
		);

        add_settings_field (
			'navwidth', // id
			__( 'Navigation Width', 'fotoramamulti' ), // title
			array( $this, 'navwidth_callback' ), // callback
			'fotorama-elevation-admin', // page
			'fotorama_elevation_setting_section' // section
		);

        add_settings_field (
			'f_thumbwidth', // id
			__( 'Thumbnail Width', 'fotoramamulti' ), // title
			array( $this, 'f_thumbwidth_callback' ), // callback
			'fotorama-elevation-admin', // page
			'fotorama_elevation_setting_section' // section
		);

        add_settings_field (
			'f_thumbheight', // id
			__( 'Thumbnail Height', 'fotoramamulti' ), // title
			array( $this, 'f_thumbheight_callback' ), // callback
			'fotorama-elevation-admin', // page
			'fotorama_elevation_setting_section' // section
		);

        add_settings_field (
			'thumbmargin', // id
			__( 'Thumbnail Margin', 'fotoramamulti' ), // title
			array( $this, 'thumbmargin_callback' ), // callback
			'fotorama-elevation-admin', // page
			'fotorama_elevation_setting_section' // section
		);

        add_settings_field (
			'thumbborderwidth', // id
			__( 'Thumbnail Border Width', 'fotoramamulti' ), // title
			array( $this, 'thumbborderwidth_callback' ), // callback
			'fotorama-elevation-admin', // page
			'fotorama_elevation_setting_section' // section
		);

        add_settings_field (
			'thumbbordercolor', // id
			__( 'Thumbnail Border Colour', 'fotoramamulti' ), // title
			array( $this, 'thumbbordercolor_callback' ), // callback
			'fotorama-elevation-admin', // page
			'fotorama_elevation_setting_section' // section
		);

        add_settings_field (
			'transition', // id
			__( 'Slide Transition Type', 'fotoramamulti' ), // title
			array( $this, 'transition_callback' ), // callback
			'fotorama-elevation-admin', // page
			'fotorama_elevation_setting_section' // section
		);

        add_settings_field (
			'transitionduration', // id
			__( 'Transition Duration', 'fotoramamulti' ), // title
			array( $this, 'transitionduration_callback' ), // callback
			'fotorama-elevation-admin', // page
			'fotorama_elevation_setting_section' // section
		);

        add_settings_field (
			'loop', // id
			__( 'Loop through Slides', 'fotoramamulti' ), // title
			array( $this, 'loop_callback' ), // callback
			'fotorama-elevation-admin', // page
			'fotorama_elevation_setting_section' // section
		);

        add_settings_field (
			'autoplay', // id
			__( 'Autoplay Slideshow', 'fotoramamulti' ), // title
			array( $this, 'autoplay_callback' ), // callback
			'fotorama-elevation-admin', // page
			'fotorama_elevation_setting_section' // section
		);

        add_settings_field (
			'arrows', // id
			__( 'Show Arrows', 'fotoramamulti' ), // title
			array( $this, 'arrows_callback' ), // callback
			'fotorama-elevation-admin', // page
			'fotorama_elevation_setting_section' // section
		);
		/*
        add_settings_field (
			'shadows', // id
			__( 'shadows', 'fotoramamulti' ), // title
			array( $this, 'shadows_callback' ), // callback
			'fotorama-elevation-admin', // page
			'fotorama_elevation_setting_section' // section
		);
		*/
		add_settings_field(
			'useCDN_13', // id
			__( 'Add Permalink', 'fotoramamulti' ), // title. Attention: Variable re-used for add Permalink. Variable name is misleading!
			array( $this, 'useCDN_13_callback' ), // callback
			'fotorama-elevation-admin', // page
			'fotorama_elevation_setting_section' // section
        );
		
		add_settings_field(
			'setCustomFields_15', // id
			__( 'Set Custom Fields for post', 'fotoramamulti' ), // title
			array( $this, 'setCustomFields_15_callback' ), // callback
			'fotorama-elevation-admin', // page
			'fotorama_elevation_setting_section' // section
        );

		add_settings_field(
			'doYoastXmlSitemap_16', // id
			__( 'Generate Entries in Yoast XML-Sitemap for Fotorama Images', 'fotoramamulti' ), // title
			array( $this, 'doYoastXmlSitemap_16_callback' ), // callback
			'fotorama-elevation-admin', // page
			'fotorama_elevation_setting_section' // section
        );        

		// --------------- GPX-Section --------------------------------------------------------
		add_settings_section("gpx_section", __('GPX-File', 'fotoramamulti') . ' upload', null, "gpx_file");
    	add_settings_field("gpx-file", __('GPX-File', 'fotoramamulti') , array( $this, "gpx_file_callback"), "gpx_file", "gpx_section");  
		register_setting("gpx_section", "gpx-file", array( $this, "handle_file_upload") );

		add_settings_field(
			'gpx_reduce', // id
			__('GPX-Parsing', 'fotoramamulti'), // title
			array( $this, 'gpx_reduce_callback' ), // callback
			'gpx_file', // page
			'gpx_section' // section
		);

		add_settings_field(
			'gpx_smooth', // id
			__('Distance-Smooth', 'fotoramamulti'), // title
			array( $this, 'gpx_smooth_callback' ), // callback
			'gpx_file', // page
			'gpx_section' // section
		);

		add_settings_field(
			'gpx_elesmooth', // id
			__('Elevation-Smooth', 'fotoramamulti'), // title
			array( $this, 'gpx_elesmooth_callback' ), // callback
			'gpx_file', // page
			'gpx_section' // section
		);

		add_settings_field(
			'gpx_overwrite', // id
			__('Overwrite GPX-Track', 'fotoramamulti'), // title
			array( $this, 'gpx_overwrite_callback' ), // callback
			'gpx_file', // page
			'gpx_section' // section
		);
		// Database options for GPX-File-Upload Section. not quite correct but we are in the admin_init hook
		if ( ! get_option('fotorama_option2')){
			$this->fotorama_option2 = array(
				'gpx_reduce' => true,
				'gpx_smooth' => 25, // Distance smooth in meters
				'gpx_elesmooth' => 4, // Elevation smooth in meters
				'gpx_overwrite' => true);
			add_option('fotorama_option2', $this->fotorama_option2);
			} else {
				$this->fotorama_option2 = get_option('fotorama_option2');
		}
		
	}
	
	// --------------------- Calllbacks -------------------------------//
	public function gpx_file_callback() {
		?><input type="file" name="gpx-file" /><?php // create html button for file name
		echo ('</br>Upload' .  get_option('gpx-file') );
	}

	public function gpx_reduce_callback() {
		printf(
			'<input type="checkbox" name="gpx-file[gpx_reduce]" id="gpx_reduce" value="gpx_reduce" %s><label for="gpx_reduce">%s %s</label>',
			( $this->fotorama_option2['gpx_reduce'] === 'true' ) ? 'checked' : '',
			__('Reduce and add Metadata to', 'fotoramamulti'), 
			__('GPX-File', 'fotoramamulti')
		);
	}

	public function gpx_smooth_callback() {
		$this->fotorama_option2 = get_option('fotorama_option2');
		printf(
			'<input type="number" min="1" max="50" name="gpx-file[gpx_smooth]" id="gpx_smooth" value=%s><label> %s</label>',
			( isset( $this->fotorama_option2['gpx_smooth'] ) ? esc_attr( $this->fotorama_option2['gpx_smooth']): ''),
			__( 'Min. Distance of Track-Points in Meters', 'fotoramamulti')
		);
	}

	public function gpx_elesmooth_callback() {
		$this->fotorama_option2 = get_option('fotorama_option2');
		printf(
			'<input type="number" min="1" max="50" name="gpx-file[gpx_elesmooth]" id="gpx_elesmooth" value=%s><label> %s</label>',
			( isset( $this->fotorama_option2['gpx_elesmooth'] ) ? esc_attr( $this->fotorama_option2['gpx_elesmooth']) : '' ),
			__( 'Min. Elevation between Track-Points in Meters. Used in Statistics Calc only. Best is 4.', 'fotoramamulti')
		);
	}

	public function gpx_overwrite_callback() {
		printf(
			'<input type="checkbox" name="gpx-file[gpx_overwrite]" id="gpx_overwrite" value="gpx_overwrite" %s><label for="gpx_overwrite"> %s</label>',
			( $this->fotorama_option2['gpx_overwrite'] === 'true' ) ? 'checked' : '',
			__( 'Overwrite existing GPX-File', 'fotoramamulti')	
		);
	}

	public function handle_file_upload($option) { 

		$this->fotorama_elevation_options = get_option( 'fotorama_elevation_option_name' );
		$this->fotorama_option2 = get_option('fotorama_option2');
		$this->up_dir = wp_get_upload_dir()['basedir'];     // upload_dir

		$parsegpxfile = $option["gpx_reduce"] == 'gpx_reduce';
		$parsegpxfile ? $this->fotorama_option2['gpx_reduce'] = 'true' : $this->fotorama_option2['gpx_reduce'] = 'false';

		$overwrite = $option["gpx_overwrite"] == 'gpx_overwrite';
		$overwrite ? $this->fotorama_option2['gpx_overwrite'] = 'true' : $this->fotorama_option2['gpx_overwrite'] = 'false';
		//$success = update_option( 'fotorama_elevation_option_name', $this->fotorama_elevation_options );

		$this->fotorama_option2['gpx_smooth'] = intval($option["gpx_smooth"]);	
		$smooth = $this->fotorama_option2['gpx_smooth'];

		$this->fotorama_option2['gpx_elesmooth'] = intval($option["gpx_elesmooth"]);	
		$elesmooth = $this->fotorama_option2['gpx_elesmooth'];		
			
		update_option( 'fotorama_option2', $this->fotorama_option2 );

		$file = $_FILES['gpx-file']['name'];
		$path = $this->up_dir . '/' . $this->fotorama_elevation_options['path_to_gpx_files_2'];
		$complete = $path . '/' . $file;

		if( is_dir($path) ) {
			//echo "The Directory {$path} exists";
		} else {
			mkdir($path , 0777);
			//echo "The Directory {$path} was created";
		}

		if( (! is_file($complete) || ($overwrite) ) && ($file != '')) {
			$name_file = $_FILES['gpx-file']['name'];
			$tmp_name = $_FILES['gpx-file']['tmp_name']; 

			if ($parsegpxfile) { 
				$values = parsegpx ($tmp_name, $path, $name_file, $smooth, $elesmooth);
				$result = strpos($values, 'Skip') == false;
			} else {
				$result = move_uploaded_file( $tmp_name, $path. '/'.$name_file );
				$values = __('File not touched!');
			}

			if( $result )  {
				$temp = ' of "'. $name_file . '" successful! </br> With: ' . $values;
			} else {
				$temp = ". " . __('The file was not uploaded. ') . $values;
			}

			return $temp;  
		}
		
		if ($file == '') { $temp = '. ' . __('No Filename given!') ;}
		else { $temp = __("File alread exists!"); }

		return $temp;
	}

	public function path_to_images_for_fotorama_0_callback() {
		printf(
			'<input class="regular-text" type="text" placeholder="Define path without leading and trailing slashes" name="fotorama_elevation_option_name[path_to_images_for_fotorama_0]" id="path_to_images_for_fotorama_0" value="%s"><p>%s</p>',
			isset( $this->fotorama_elevation_options['path_to_images_for_fotorama_0'] ) ? esc_attr( $this->fotorama_elevation_options['path_to_images_for_fotorama_0']) : '',
			$this->up_dir . '/' . $this->fotorama_elevation_options['path_to_images_for_fotorama_0']
		);
	}

	public function colour_theme_for_leaflet_elevation_1_callback() {
		?> <select name="fotorama_elevation_option_name[colour_theme_for_leaflet_elevation_1]" id="colour_theme_for_leaflet_elevation_1">
			<?php $selected = (isset( $this->fotorama_elevation_options['colour_theme_for_leaflet_elevation_1'] ) && $this->fotorama_elevation_options['colour_theme_for_leaflet_elevation_1'] === 'martin-theme') ? 'selected' : '' ; ?>
			<option value="martin-theme" <?php echo $selected; ?>>Martin</option>
			<?php $selected = (isset( $this->fotorama_elevation_options['colour_theme_for_leaflet_elevation_1'] ) && $this->fotorama_elevation_options['colour_theme_for_leaflet_elevation_1'] === 'lime-theme') ? 'selected' : '' ; ?>
			<option value="lime-theme" <?php echo $selected; ?>>Lime</option>
			<?php $selected = (isset( $this->fotorama_elevation_options['colour_theme_for_leaflet_elevation_1'] ) && $this->fotorama_elevation_options['colour_theme_for_leaflet_elevation_1'] === 'steelblue-theme') ? 'selected' : '' ; ?>
			<option value="steelblue-theme" <?php echo $selected; ?>>Steelblue </option>
			<?php $selected = (isset( $this->fotorama_elevation_options['colour_theme_for_leaflet_elevation_1'] ) && $this->fotorama_elevation_options['colour_theme_for_leaflet_elevation_1'] === 'purple-theme') ? 'selected' : '' ; ?>
			<option value="purple-theme" <?php echo $selected; ?>>Purple</option>
			<?php $selected = (isset( $this->fotorama_elevation_options['colour_theme_for_leaflet_elevation_1'] ) && $this->fotorama_elevation_options['colour_theme_for_leaflet_elevation_1'] === 'yellow-theme') ? 'selected' : '' ; ?>
			<option value="yellow-theme" <?php echo $selected; ?>>Yellow</option>
			<?php $selected = (isset( $this->fotorama_elevation_options['colour_theme_for_leaflet_elevation_1'] ) && $this->fotorama_elevation_options['colour_theme_for_leaflet_elevation_1'] === 'red-theme') ? 'selected' : '' ; ?>
			<option value="red-theme" <?php echo $selected; ?>>Red</option>
			<?php $selected = (isset( $this->fotorama_elevation_options['colour_theme_for_leaflet_elevation_1'] ) && $this->fotorama_elevation_options['colour_theme_for_leaflet_elevation_1'] === 'magenta-theme') ? 'selected' : '' ; ?>
			<option value="magenta-theme" <?php echo $selected; ?>>Magenta </option>
			<?php $selected = (isset( $this->fotorama_elevation_options['colour_theme_for_leaflet_elevation_1'] ) && $this->fotorama_elevation_options['colour_theme_for_leaflet_elevation_1'] === 'lightblue-theme') ? 'selected' : '' ; ?>
			<option value="lightblue-theme" <?php echo $selected; ?>>Lightblue</option>
		</select> <?php
	}

	public function path_to_gpx_files_2_callback() {
		printf(
			'<input class="regular-text" type="text" placeholder="Define path without leading and trailing slashes" name="fotorama_elevation_option_name[path_to_gpx_files_2]" id="path_to_gpx_files_2" value="%s"><p>%s</p>',
			isset( $this->fotorama_elevation_options['path_to_gpx_files_2'] ) ? esc_attr( $this->fotorama_elevation_options['path_to_gpx_files_2']) : '', 
			$this->up_dir . '/' . $this->fotorama_elevation_options['path_to_gpx_files_2']
		);
	}

	public function download_gpx_files_3_callback() {
		printf(
			'<input type="checkbox" name="fotorama_elevation_option_name[download_gpx_files_3]" id="download_gpx_files_3" value="download_gpx_files_3" %s> <label for="download_gpx_files_3">%s.</label>',
			( isset( $this->fotorama_elevation_options['download_gpx_files_3'] ) && $this->fotorama_elevation_options['download_gpx_files_3'] === 'true' ) ? 'checked' : '',
			__( 'Provide download link for GPX-Files', 'fotoramamulti' ) 
		);
	}

	public function show_caption_4_callback() {
		printf(
			'<input type="checkbox" name="fotorama_elevation_option_name[show_caption_4]" id="show_caption_4" value="show_caption_4" %s>',
			( isset( $this->fotorama_elevation_options['show_caption_4'] ) && $this->fotorama_elevation_options['show_caption_4'] === 'true' ) ? 'checked' : ''
		);
	}

	public function images_with_gps_required_5_callback() {
		printf(
			'<input type="checkbox" name="fotorama_elevation_option_name[images_with_gps_required_5]" id="images_with_gps_required_5" value="images_with_gps_required_5" %s> <label for="images_with_gps_required_5">%s</label>',
			( isset( $this->fotorama_elevation_options['images_with_gps_required_5'] ) && $this->fotorama_elevation_options['images_with_gps_required_5'] === 'true' ) ? 'checked' : '',
			__( 'Show images only if they provide GPS-Data in EXIF. Remember to set showmap="false".' , 'fotoramamulti' )
		);
	}

	public function ignore_custom_sort_6_callback() {
		printf(
			'<input type="checkbox" name="fotorama_elevation_option_name[ignore_custom_sort_6]" id="ignore_custom_sort_6" value="ignore_custom_sort_6" %s> <label for="ignore_custom_sort_6">%s</label>',
			( isset( $this->fotorama_elevation_options['ignore_custom_sort_6'] ) && $this->fotorama_elevation_options['ignore_custom_sort_6'] === 'true' ) ? 'checked' : '',
			__( 'Ignore custom sort even if provided by Wordpress. Sort ascending by date taken if checked.', 'fotoramamulti' )
		);
	}

	public function show_address_of_start_7_callback() {
		printf(
		'<input type="checkbox" name="fotorama_elevation_option_name[show_address_of_start_7]" id="show_address_of_start_7" value="show_address_of_start_7" %s> <label for="show_address_of_start_7">%s</label>',
		( isset ( $this->fotorama_elevation_options['show_address_of_start_7'] ) && $this->fotorama_elevation_options['show_address_of_start_7'] === 'true' ) ? 'checked' : '',
		__( 'Show address of starting point (taken from the first image or GPX-coordinate in the GPX-track)', 'fotoramamulti' )
		);
	}
	// --------- TileServer added 2022-08-24 ----------------
	public function usetileserver_callback() {
		printf(
		'<input type="checkbox" name="fotorama_elevation_option_name[use_tile_server]" id="use_tile_server" value="use_tile_server" %s> <label for="use_tile_server">%s</label>',
		( isset ( $this->fotorama_elevation_options['use_tile_server'] ) && $this->fotorama_elevation_options['use_tile_server'] === 'true' ) ? 'checked' : '',
		__( 'Use a local Tile-Server to provide Map-Tiles', 'fotoramamulti' )
		);
	}

	public function tiles_as_webp_callback() {
		printf(
		'<input type="checkbox" name="fotorama_elevation_option_name[convert_tiles_to_webp]" id="convert_tiles_to_webp" value="convert_tiles_to_webp" %s> <label for="convert_tiles_to_webp">%s</label>',
		( isset ( $this->fotorama_elevation_options['convert_tiles_to_webp'] ) && $this->fotorama_elevation_options['convert_tiles_to_webp'] === 'true' ) ? 'checked' : '',
		__( 'Convert Tile-Files to webp (conversion settings in PHP only)', 'fotoramamulti' )
		);
	}
	// --------- TileServer ----------------

	public function text_for_start_address_8_callback() {
		printf(
			'<input class="regular-text" type="text" required name="fotorama_elevation_option_name[text_for_start_address_8]" id="text_for_start_address_8" value="%s">',
			isset( $this->fotorama_elevation_options['text_for_start_address_8'] ) ? esc_attr( $this->fotorama_elevation_options['text_for_start_address_8']) : ''
		);
	}

	public function general_text_for_the_fotorama_alt_9_callback() {
		printf(
			'<input class="regular-text" type="text" name="fotorama_elevation_option_name[general_text_for_the_fotorama_alt_9]" id="general_text_for_the_fotorama_alt_9" value="%s">',
			isset( $this->fotorama_elevation_options['general_text_for_the_fotorama_alt_9'] ) ? esc_attr( $this->fotorama_elevation_options['general_text_for_the_fotorama_alt_9']) : ''
		);
	}

	public function mapselector_callback() {
		?> <select name="fotorama_elevation_option_name[mapselector]" id="mapselector">
			<?php $selected = (isset( $this->fotorama_elevation_options['mapselector'] ) && $this->fotorama_elevation_options['mapselector'] === 'OpenStreetMap') ? 'selected' : '' ; ?>
			<option value="OpenStreetMap" <?php echo $selected; ?>>OpenStreetMap</option>
			<?php $selected = (isset( $this->fotorama_elevation_options['mapselector'] ) && $this->fotorama_elevation_options['mapselector'] === 'OpenTopoMap') ? 'selected' : '' ; ?>
			<option value="OpenTopoMap" <?php echo $selected; ?>>OpenTopoMap</option>
			<?php $selected = (isset( $this->fotorama_elevation_options['mapselector'] ) && $this->fotorama_elevation_options['mapselector'] === 'CycleOSM') ? 'selected' : '' ; ?>
			<option value="CycleOSM" <?php echo $selected; ?>>CycleOSM </option>
			<?php $selected = (isset( $this->fotorama_elevation_options['mapselector'] ) && $this->fotorama_elevation_options['mapselector'] === 'Satellit') ? 'selected' : '' ; ?>
			<option value="Satellit" <?php echo $selected; ?>>Satellit</option>
		</select> <?php
	}

	public function height_of_map_10_callback() {
		printf(
			'<input type="number" min="'. $this->min_height_map .'" max="'. $this->max_height_map .'" name="fotorama_elevation_option_name[height_of_map_10]" id="height_of_map_10" value="%s"><label>  Min: %s px, Max: %s px</label>',
			isset( $this->fotorama_elevation_options['height_of_map_10'] ) ? esc_attr( $this->fotorama_elevation_options['height_of_map_10']) : '',
			$this->min_height_map, $this->max_height_map
		);
	}

	public function height_of_chart_11_callback() {
		printf(
			'<input type="number" min="'. $this->min_height_chart .'" max="'. $this->max_height_chart .'" name="fotorama_elevation_option_name[height_of_chart_11]" id="height_of_chart_11" value="%s"><label>  Min: %s px, Max: %s px</label>',
			isset( $this->fotorama_elevation_options['height_of_chart_11'] ) ? esc_attr( $this->fotorama_elevation_options['height_of_chart_11']) : '',
			$this->min_height_chart, $this->max_height_chart
		);
	}

	public function max_width_of_container_12_callback() {
		printf(
			'<input type="number" min="'. $this->min_width .'" max="'. $this->max_width .'" name="fotorama_elevation_option_name[max_width_of_container_12]" id="max_width_of_container_12" value="%s"><label>  Min: %s px, Max: %s px</label>',
			isset( $this->fotorama_elevation_options['max_width_of_container_12'] ) ? esc_attr( $this->fotorama_elevation_options['max_width_of_container_12']) : '',
			$this->min_width, $this->max_width
		);
	}

	public function useCDN_13_callback() {
		printf(
			'<input type="checkbox" name="fotorama_elevation_option_name[useCDN_13]" id="useCDN_13" value="useCDN_13" %s> <label for="useCDN_13">%s</label>',
			( isset( $this->fotorama_elevation_options['useCDN_13'] ) && $this->fotorama_elevation_options['useCDN_13'] === 'true' ) ? 'checked' : '',
			__( 'Add a Permalink to the attachment page of the Image. AND add the permalink ot the sitemap instead of the image link.', 'fotoramamulti' )
		);
	}

	public function min_width_css_grid_row_14_callback() {
		printf(
			'<input type="number" min="'. $this->min_width/2 .'" max="'. $this->max_width .'" name="fotorama_elevation_option_name[min_width_css_grid_row_14]" id="min_width_css_grid_row_14" value="%s"><label>  Min: %s px, Max: %s px</label>',
			isset( $this->fotorama_elevation_options['min_width_css_grid_row_14'] ) ? esc_attr( $this->fotorama_elevation_options['min_width_css_grid_row_14']) : '480',
			$this->min_width/2, $this->max_width
		);
	}

	public function fit_callback() {
		?> <select name="fotorama_elevation_option_name[fit]" id="fit">
			<?php $selected = (isset( $this->fotorama_elevation_options['fit'] ) && $this->fotorama_elevation_options['fit'] === 'contain') ? 'selected' : '' ; ?>
			<option value='contain' <?php echo $selected; ?>>Contain</option>
			<?php $selected = (isset( $this->fotorama_elevation_options['fit'] ) && $this->fotorama_elevation_options['fit'] === 'cover') ? 'selected' : '' ; ?>
			<option value="cover" <?php echo $selected; ?>>Cover</option>
			<?php $selected = (isset( $this->fotorama_elevation_options['fit'] ) && $this->fotorama_elevation_options['fit'] === 'scaledown') ? 'selected' : '' ; ?>
			<option value="scaledown" <?php echo $selected; ?>>Scaledown </option>
			<?php $selected = (isset( $this->fotorama_elevation_options['fit'] ) && $this->fotorama_elevation_options['fit'] === 'none') ? 'selected' : '' ; ?>
			<option value="none" <?php echo $selected; ?>>None</option>
		</select> <?php
	}

	public function setCustomFields_15_callback() {
		printf(
			'<input type="checkbox" name="fotorama_elevation_option_name[setCustomFields_15]" id="setCustomFields_15" value="setCustomFields_15" %s> <label for="setCustomFields_15">%s</label>',
			( isset( $this->fotorama_elevation_options['setCustomFields_15'] ) && $this->fotorama_elevation_options['setCustomFields_15'] === 'true' ) ? 'checked' : '',
			__('Set Custom Fields (geoadress, lat, lon) in post. Geoadress is for the address shown under the elevation chart. Lat.,Lon. is for the GPS-Coords used for the Overview-Map.','fotoramamulti')
		);
	}

	public function doYoastXmlSitemap_16_callback() {
		printf(
			'<input type="checkbox" name="fotorama_elevation_option_name[doYoastXmlSitemap_16]" id="doYoastXmlSitemap_16" value="doYoastXmlSitemap_16" %s> <label for="doYoastXmlSitemap_16">%s</label>',
			( isset( $this->fotorama_elevation_options['doYoastXmlSitemap_16'] ) && $this->fotorama_elevation_options['doYoastXmlSitemap_16'] === 'true' ) ? 'checked' : '',
			__('Generate the Yoast XML-Sitemap with the images shown in the Fotorama-Slider. Used for SEO.','fotoramamulti')
		);
	}

	public function ratio_callback() {
		printf(
			'<input type="number" min="0.1" max="5.0" step="0.1" name="fotorama_elevation_option_name[ratio]" id="ratio" value="%s"><label> Min: 0.1 in ratio, Max: 5.0 in ratio</label>',
			isset( $this->fotorama_elevation_options['ratio'] ) ? esc_attr( $this->fotorama_elevation_options['ratio'] ) : ''
		);
	}

    public function background_callback() {
		printf(
			'<input class="regular-text" type="text" required name="fotorama_elevation_option_name[background]" id="background" value="%s">',
			isset( $this->fotorama_elevation_options['background'] ) ? esc_attr( $this->fotorama_elevation_options['background'] ) : ''
		);
	}

    public function navposition_callback() {
		?> <select name="fotorama_elevation_option_name[navposition]" id="navposition">
				<?php $selected = (isset( $this->fotorama_elevation_options['navposition'] ) && $this->fotorama_elevation_options['navposition'] === 'top') ? 'selected' : '' ; ?>
               <option value='top' <?php echo $selected; ?>>Top</option>
               <?php $selected = (isset( $this->fotorama_elevation_options['navposition'] ) && $this->fotorama_elevation_options['navposition'] === 'bottom') ? 'selected' : '' ; ?>
               <option value='bottom' <?php echo $selected; ?>>Bottom</option>
           </select> <?php 
	}

    public function navwidth_callback() {
		printf(
			'<input type="number" min="10" max="100"  name="fotorama_elevation_option_name[navwidth]" id="navwidth" value="%s"><label> Min: 10 in percent, Max: 100 in percent</label>',
			isset( $this->fotorama_elevation_options['navwidth'] ) ? esc_attr( $this->fotorama_elevation_options['navwidth'] ) : ''
		);
	}

    public function f_thumbwidth_callback() {
		printf(
			'<input type="number" min="10" max="200"  name="fotorama_elevation_option_name[f_thumbwidth]" id="f_thumbwidth" value="%s"><label> Min: 10 in pixels, Max: 200 in pixels</label>',
			isset( $this->fotorama_elevation_options['f_thumbwidth'] ) ? esc_attr( $this->fotorama_elevation_options['f_thumbwidth'] ) : ''
		);
	}

    public function f_thumbheight_callback() {
		printf(
			'<input type="number" min="10" max="200"  name="fotorama_elevation_option_name[f_thumbheight]" id="f_thumbheight" value="%s"><label> Min: 10 in pixels, Max: 200 in pixels</label>',
			isset( $this->fotorama_elevation_options['f_thumbheight'] ) ? esc_attr( $this->fotorama_elevation_options['f_thumbheight'] ) : ''
		);
	}

    public function thumbmargin_callback() {
		printf(
			'<input type="number" min="0" max="20"  name="fotorama_elevation_option_name[thumbmargin]" id="thumbmargin" value="%s"><label> Min: 0 in pixels, Max: 20 in pixels</label>',
			isset( $this->fotorama_elevation_options['thumbmargin'] ) ? esc_attr( $this->fotorama_elevation_options['thumbmargin'] ) : ''
		);
	}

    public function thumbborderwidth_callback() {
		printf(
			'<input type="number" min="0" max="20"  name="fotorama_elevation_option_name[thumbborderwidth]" id="thumbborderwidth" value="%s"><label> Min: 0 in pixels, Max: 20 in pixels</label>',
			isset( $this->fotorama_elevation_options['thumbborderwidth'] ) ? esc_attr( $this->fotorama_elevation_options['thumbborderwidth'] ) : ''
		);
	}

    public function thumbbordercolor_callback() {
		printf(
			'<input class="regular-text" type="text" required name="fotorama_elevation_option_name[thumbbordercolor]" id="thumbbordercolor" value="%s">',
			isset( $this->fotorama_elevation_options['thumbbordercolor'] ) ? esc_attr( $this->fotorama_elevation_options['thumbbordercolor'] ) : ''
		);
	}

    public function transition_callback() {
		?> <select name="fotorama_elevation_option_name[transition]" id="transition">
               <?php $selected = (isset( $this->fotorama_elevation_options['transition'] ) && $this->fotorama_elevation_options['transition'] === 'slide') ? 'selected' : '' ; ?>
               <option value='slide' <?php echo $selected; ?>>Slide</option>
               <?php $selected = (isset( $this->fotorama_elevation_options['transition'] ) && $this->fotorama_elevation_options['transition'] === 'crossfade') ? 'selected' : '' ; ?>
               <option value='crossfade' <?php echo $selected; ?>>Crossfade</option>
               <?php $selected = (isset( $this->fotorama_elevation_options['transition'] ) && $this->fotorama_elevation_options['transition'] === 'dissolve') ? 'selected' : '' ; ?>
               <option value='dissolve' <?php echo $selected; ?>>Dissolve</option>
           </select> <?php 
	}

    public function transitionduration_callback() {
		printf(
			'<input type="number" min="0" max="1000"  name="fotorama_elevation_option_name[transitionduration]" id="transitionduration" value="%s"><label> Min: 0 in ms, Max: 1000 in ms</label>',
			isset( $this->fotorama_elevation_options['transitionduration'] ) ? esc_attr( $this->fotorama_elevation_options['transitionduration'] ) : ''
		);
	}

    public function loop_callback() {
		printf(
		'<input type="checkbox" name="fotorama_elevation_option_name[loop]" id="loop" value="loop" %s> <label for="loop">%s</label>',
		( isset ( $this->fotorama_elevation_options['loop'] ) && $this->fotorama_elevation_options['loop'] === 'true' ) ? 'checked' : '',
        __( 'loop', 'fotoramamulti' )
		);
	}

    public function autoplay_callback() {
		printf(
			'<input class="regular-text" type="text" required name="fotorama_elevation_option_name[autoplay]" id="autoplay" value="%s"><label> %s</label>',
			( isset( $this->fotorama_elevation_options['autoplay'] ) ? esc_attr( $this->fotorama_elevation_options['autoplay'] ) : '' ),
			__( 'Values: false, true, or integer value in milliseconds', 'fotoramamulti' ) 
			//__( 'autoplay_explanation', 'fotoramamulti' )
		);
	}

    public function arrows_callback() {
		?> <select name="fotorama_elevation_option_name[arrows]" id="arrows">
               <?php $selected = (isset( $this->fotorama_elevation_options['arrows'] ) && $this->fotorama_elevation_options['arrows'] === 'true') ? 'selected' : '' ; ?>
               <option value='true' <?php echo $selected; ?>>True</option>
               <?php $selected = (isset( $this->fotorama_elevation_options['arrows'] ) && $this->fotorama_elevation_options['arrows'] === 'false') ? 'selected' : '' ; ?>
               <option value='false' <?php echo $selected; ?>>False</option>
               <?php $selected = (isset( $this->fotorama_elevation_options['arrows'] ) && $this->fotorama_elevation_options['arrows'] === 'always') ? 'selected' : '' ; ?>
               <option value='always' <?php echo $selected; ?>>Always</option>
           </select> <?php 
	}

    public function shadows_callback() {
		printf(
		'<input type="checkbox" name="fotorama_elevation_option_name[shadows]" id="shadows" value="shadows" %s> <label for="shadows"> %s</label>',
		( isset ( $this->fotorama_elevation_options['shadows'] ) && $this->fotorama_elevation_options['shadows'] === 'true' ) ? 'checked' : '',
        __( 'shadows', 'fotoramamulti' )
		);
	}
	
	// --------------------- Sanitizers -------------------------------//
	public function fotorama_elevation_sanitize($input) {
		$sanitary_values = array();
		if ( isset( $input['path_to_images_for_fotorama_0'] ) ) {
			$sanitary_values['path_to_images_for_fotorama_0'] = $this->my_sanitize_path( $input['path_to_images_for_fotorama_0'] );
		}

		if ( isset( $input['colour_theme_for_leaflet_elevation_1'] ) ) {
			$sanitary_values['colour_theme_for_leaflet_elevation_1'] = $input['colour_theme_for_leaflet_elevation_1'];
		}

		if ( isset( $input['path_to_gpx_files_2'] ) ) {
			$sanitary_values['path_to_gpx_files_2'] = $this->my_sanitize_path( $input['path_to_gpx_files_2'] );
		}

		if ( isset( $input['download_gpx_files_3'] ) ) { // wird nur durchlaufen, wenn button gecheckt ist, sonst nicht.
			$sanitary_values['download_gpx_files_3'] = 'true';
		} else {
			$sanitary_values['download_gpx_files_3'] = 'false';
		}

		if ( isset( $input['show_caption_4'] ) ) {
			$sanitary_values['show_caption_4'] = 'true';
		} else {
			$sanitary_values['show_caption_4'] = 'false';
		}

		if ( isset( $input['images_with_gps_required_5'] ) ) {
			$sanitary_values['images_with_gps_required_5'] = 'true';
		} else {
			$sanitary_values['images_with_gps_required_5'] = 'false';
		}

		if ( isset( $input['ignore_custom_sort_6'] ) ) {
			$sanitary_values['ignore_custom_sort_6'] = 'true';
		} else {
			$sanitary_values['ignore_custom_sort_6'] = 'false';
		}
		// --------- TileServer added 2022-08-24 ----------------
		if ( isset( $input['use_tile_server'] ) ) {
			$sanitary_values['use_tile_server'] = 'true';
		} else {
			$sanitary_values['use_tile_server'] = 'false';
		}

		if ( isset( $input['convert_tiles_to_webp'] ) ) {
			$sanitary_values['convert_tiles_to_webp'] = 'true';
		} else {
			$sanitary_values['convert_tiles_to_webp'] = 'false';
		}
		// --------- TileServer ----------------

		if ( isset( $input['show_address_of_start_7'] ) ) {
			$sanitary_values['show_address_of_start_7'] = 'true';
		} else {
			$sanitary_values['show_address_of_start_7'] = 'false';
		}

		if ( isset( $input['text_for_start_address_8'] ) ) {
			$sanitary_values['text_for_start_address_8'] = $this->my_sanitize_text( $input['text_for_start_address_8'] );
		}

		if ( isset( $input['general_text_for_the_fotorama_alt_9'] ) ) {
			$sanitary_values['general_text_for_the_fotorama_alt_9'] = $this->my_sanitize_text( $input['general_text_for_the_fotorama_alt_9'] );
		}

		if ( isset( $input['mapselector'] ) ) {
			$sanitary_values['mapselector'] = $input['mapselector'];
		}

		if ( isset( $input['height_of_map_10'] ) ) {
			$sanitary_values['height_of_map_10'] = $this->my_sanitize_int_with_limits($input['height_of_map_10'], $this->min_height_map, $this->max_height_map );
		}

		if ( isset( $input['height_of_chart_11'] ) ) {
			$sanitary_values['height_of_chart_11'] = $this->my_sanitize_int_with_limits($input['height_of_chart_11'], $this->min_height_chart, $this->max_height_chart );
		}

		if ( isset( $input['max_width_of_container_12'] ) ) {
			$sanitary_values['max_width_of_container_12'] = $this->my_sanitize_int_with_limits($input['max_width_of_container_12'], $this->min_width, $this->max_width );
		}

		if ( isset( $input['useCDN_13'] ) ) {
			$sanitary_values['useCDN_13'] = 'true';
		} else {
			$sanitary_values['useCDN_13'] = 'false';
		}

		if ( isset( $input['min_width_css_grid_row_14'] ) ) {
			$sanitary_values['min_width_css_grid_row_14'] = $this->my_sanitize_int_with_limits($input['min_width_css_grid_row_14'], $this->min_width/2, $this->max_width );
		}

		if ( isset( $input['setCustomFields_15'] ) ) {
			$sanitary_values['setCustomFields_15'] = 'true';
		} else {
			$sanitary_values['setCustomFields_15'] = 'false';
		}

		if ( isset( $input['doYoastXmlSitemap_16'] ) ) {
			$sanitary_values['doYoastXmlSitemap_16'] = 'true';
		} else {
			$sanitary_values['doYoastXmlSitemap_16'] = 'false';
		}

		if ( isset( $input['fit'] ) ) {
			$sanitary_values['fit'] = $input['fit'];
		}
		
		if ( isset ( $input[ 'ratio' ] ) ) {
			$sanitary_values['ratio'] = $this->my_sanitize_int_with_limits ( $input['ratio'], 0.1, 5.0 );
		}

		if ( isset ( $input[ 'background' ] ) ) {
				$sanitary_values [ 'background' ] = $this->my_sanitize_csscolor( $input [ 'background' ] ); 
			}

		if ( isset ( $input[ 'navposition' ] ) ) {
				$sanitary_values [ 'navposition' ] = $input [ 'navposition' ];
			}

		if ( isset ( $input[ 'navwidth' ] ) ) {
				$sanitary_values['navwidth'] = $this->my_sanitize_int_with_limits ( $input['navwidth'], 10, 100 );
			}

		if ( isset ( $input[ 'f_thumbwidth' ] ) ) {
				$sanitary_values['f_thumbwidth'] = $this->my_sanitize_int_with_limits ( $input['f_thumbwidth'], 10, 200 );
			}

		if ( isset ( $input[ 'f_thumbheight' ] ) ) {
				$sanitary_values['f_thumbheight'] = $this->my_sanitize_int_with_limits ( $input['f_thumbheight'], 10, 200 );
		}

		if ( isset ( $input[ 'thumbmargin' ] ) ) {
				$sanitary_values['thumbmargin'] = $this->my_sanitize_int_with_limits ( $input['thumbmargin'], 0, 20 );
		}

		if ( isset ( $input[ 'thumbborderwidth' ] ) ) {
				$sanitary_values['thumbborderwidth'] = $this->my_sanitize_int_with_limits ( $input['thumbborderwidth'], 0, 20 );
		}

		if ( isset ( $input[ 'thumbbordercolor' ] ) ) {
				$sanitary_values [ 'thumbbordercolor' ] = $this->my_sanitize_csscolor( $input [ 'thumbbordercolor' ] ); 
		}

		if ( isset ( $input[ 'transition' ] ) ) {
				$sanitary_values [ 'transition' ] = $input [ 'transition' ];
		}

		if ( isset ( $input[ 'transitionduration' ] ) ) {
				$sanitary_values['transitionduration'] = $this->my_sanitize_int_with_limits ( $input['transitionduration'], 0, 1000 );
		}

		if ( isset ( $input [ 'loop' ] ) ) {
				$sanitary_values [ 'loop' ] = 'true';
			} else {
				$sanitary_values [ 'loop' ] = 'false';
		}

		if ( isset ( $input[ 'autoplay' ] ) ) {
				$sanitary_values [ 'autoplay' ] = $this->my_sanitize_special ( $input [ 'autoplay' ], array('false', 'true', array('integer', 0, 5000) ) ) ;
		}

		if ( isset ( $input[ 'arrows' ] ) ) {
			$sanitary_values [ 'arrows' ] = $input [ 'arrows' ];
		}

		if ( isset ( $input [ 'shadows' ] ) ) {
				$sanitary_values [ 'shadows' ] = 'true';
			} else {
				$sanitary_values [ 'shadows' ] = 'false';
		}

		if ( isset( $input['gpx_file'] ) ) {
			$sanitary_values['gpx_file'] = $input['gpx_file'] ;
		}
		else {}
			$sanitary_values['gpx_file'] = '';

		return $sanitary_values;
	}
	
	/**
	 * Clean user input to one single string containing only relevant characters with using 'sanitize_text_field'
	 * filter_var with 'FILTER_SANITIZE_STRING'.
	 *
	 * @param  string $inp the input string to be sanitized
	 * @return string sanitized string
	 */	
	private static function my_sanitize_text ( string $inp) :string
	{
		$inp = sanitize_text_field( $inp);
		$inp = filter_var($inp, FILTER_SANITIZE_STRING);
		return $inp;
	}

	/**
	 * Standardize a path:
	 *  - no leading or trailing slashes
	 *  - no other characters than 'A-Za-z0-9-_/'
	 *  - and clean user input to one single string containing only relevant characters
	 *
	 * @param  string $inp the input path to be sanitized
	 * @return string sanitized path
	 */
	private function my_sanitize_path (string $inp) :string
	{
		$inp = $this::my_sanitize_text( $inp );
		
		$inp = preg_replace("/[^A-Za-z0-9-_\/]/", "", $inp);
		$inp = rtrim($inp,'/');
		$inp = rtrim($inp,'\\');
		$inp = ltrim($inp,'/');
		$inp = ltrim($inp,'\\');
		return $inp;
	}

	/**
	 * check if a hex string starting with # is within given limits. All other strings are just returned.
	 * Only works together with a fallback to 'red' if invalid CSS-color-names are used.
	 *
	 * @param  string $inp the color value as plain string or as hex string
	 * @return string the sanitized color
	 */
	private function my_sanitize_csscolor ( string $inp ) :string
	{
		$inp = $this::my_sanitize_text( $inp );
		$min = 0;
		$max = 16777216; // 24 Bit max value for CSS hex colour.

		if ($inp[0] == '#') {
			$cssdec = hexdec ( substr ( $inp, 1 ) );
			if ( filter_var($cssdec, FILTER_VALIDATE_INT, array("options" => array("min_range"=> $min, "max_range"=>$max))) === false) {
				$inp = 'red';
			} 
		} 
		return $inp;
	}

	/**
	 * Check the value and range of numbers (integers AND float!). Scientific notation not allowed.
	 *
	 * @param string $inp the number as string to check where all Non-digits are ignored. So 1e10 will be 110.
	 * @param integer|float $min minimal value.
	 * @param integer|float $max maximal value.
	 * @return string the converted value as string.
	 */
	private function my_sanitize_int_with_limits( string $inp, $min, $max) :string
	{
		if ( ! \is_numeric($min) || ( ! \is_numeric( $max) ))
			return 0;
			
		$inp1 = preg_replace("/[^0-9-]/", "", $inp );
		$val = intval( $inp1 ); // the integer-value

		$inp2 = preg_replace("/[^0-9.,-]/", "", $inp );
		$dec = \floatval( $inp2 ); // the float value

		if ( (abs( $dec - $val ) < 0.0001) && (filter_var($val, FILTER_VALIDATE_INT, array("options" => array("min_range"=>$min, "max_range"=>$max))) === false) ) 
		{			
				($val < $min) ? $val = $min : $val = $max;
		}
		else {
			($dec < $min) ? $dec = $min : '';
			($dec > $max) ? $dec = $max : '';
			$val = $dec;
		}

		return strval($val);
	}

	/**
	 * Convert a string value to an integer within given min- / max-Limits or to 'false' / 'true' if input is 'FaLse' or 'TrUe' or so. Return 'false' as fallback.
	 *
	 * @param  string $inp the input value from field autoplay which could be true, false or an integer-value
	 * @param  array  $checks array of arrays where $checks[0] and $checks[1] are not used. 
	 * 				  $checks[2] defines the target value for the type conversion (only integer supported) and the min / max-Value.
	 * @return string the converted input value: 'false' or 'true' or string from integer value from $inp
	 */
	private function my_sanitize_special( string $inp, array $checks ) :string
	{
		$inp = $this::my_sanitize_text( $inp );
		
		if ( strtolower ( $inp ) == 'false' ) { return 'false'; }
		if ( strtolower ( $inp ) == 'true'  ) { return 'true'; }

		if ( ($checks[2][0] == 'integer') && \is_numeric( $inp ) ) {
			$val = intval( $inp );
		} else {
			return 'false';
		}

		$min = $checks[2][1];
		$max= $checks[2][2];

		if (filter_var($val, FILTER_VALIDATE_INT, array("options" => array("min_range"=>$min, "max_range"=>$max))) === false) {
			// echo("Variable value is not within the legal range"); Restrict to min / max-Value.
			($val < $min) ? $val = $min : $val = $max;
		} else {
			//echo("Variable value is within the legal range"). Do nothing.
		}
		
		return strval($val);
	}

	// -------------------- unused -------------------------------------//
	public function fotorama_elevation_section_info() {	
		// html code here is shown after the heading of the section
    }
    public function leaflet_elevation_section_info() {
	}

}